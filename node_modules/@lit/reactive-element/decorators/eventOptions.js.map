{"version":3,"file":"eventOptions.js","sources":["../src/decorators/eventOptions.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {ReactiveElement} from '../reactive-element.js';\nimport {ClassElement} from './base.js';\n\nconst standardEventOptions = (\n  options: AddEventListenerOptions,\n  element: ClassElement\n) => {\n  return {\n    ...element,\n    finisher(clazz: typeof ReactiveElement) {\n      Object.assign(\n        clazz.prototype[element.key as keyof ReactiveElement],\n        options\n      );\n    },\n  };\n};\n\nconst legacyEventOptions =\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (options: AddEventListenerOptions, proto: any, name: PropertyKey) => {\n    Object.assign(proto[name], options);\n  };\n\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n * ```ts\n * class MyElement {\n *   clicked = false;\n *\n *   render() {\n *     return html`\n *       <div @click=${this._onClick}`>\n *         <button></button>\n *       </div>\n *     `;\n *   }\n *\n *   @eventOptions({capture: true})\n *   _onClick(e) {\n *     this.clicked = true;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function eventOptions(options: AddEventListenerOptions) {\n  // Return value typed as any to prevent TypeScript from complaining that\n  // standard decorator function signature does not match TypeScript decorator\n  // signature\n  // TODO(kschaaf): unclear why it was only failing on this decorator and not\n  // the others\n  return ((protoOrDescriptor: Object | ClassElement, name?: string) =>\n    name !== undefined\n      ? legacyEventOptions(options, protoOrDescriptor as Object, name)\n      : standardEventOptions(\n          options,\n          protoOrDescriptor as ClassElement\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        )) as any;\n}\n"],"names":["eventOptions","options","protoOrDescriptor","name","undefined","proto","Object","assign","legacyEventOptions","element","[object Object]","clazz","prototype","key","standardEventOptions"],"mappings":";;;;;;;;;;;;;SA4EgBA,EAAaC,GAM3B,OAASC,EAA0CC,SACxCC,IAATD,EA1CF,EAACF,EAAkCI,EAAYF,KAC7CG,OAAOC,OAAOF,EAAMF,GAAOF,IA0CvBO,CAAmBP,EAASC,EAA6BC,GA5DpC,EAC3BF,EACAQ,KAEO,IACFA,EACHC,SAASC,GACPL,OAAOC,OACLI,EAAMC,UAAUH,EAAQI,KACxBZ,MAoDAa,CACEb,EACAC"}