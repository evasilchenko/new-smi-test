{"version":3,"file":"query.js","sourceRoot":"","sources":["../../src/decorators/query.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAUH,OAAO,EAEL,qBAAqB,EACrB,uBAAuB,GACxB,MAAM,WAAW,CAAC;AAEnB;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,MAAM,UAAU,KAAK,CAAC,QAAgB,EAAE,KAAe;IACrD,OAAO,CACL,iBAAwC,EACxC,IAAkB;IAClB,8DAA8D;MACzD,EAAE;QACP,MAAM,UAAU,GAAG;YACjB,GAAG;gBACD,OAAO,IAAI,CAAC,UAAU,EAAE,aAAa,CAAC,QAAQ,CAAC,CAAC;YAClD,CAAC;YACD,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;SACnB,CAAC;QACF,IAAI,KAAK,EAAE;YACT,MAAM,GAAG,GAAG,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;YAC9D,UAAU,CAAC,GAAG,GAAG;gBACf,IACI,IAAoD,CACpD,GAAa,CACd,KAAK,SAAS,EACf;oBACE,IAAoD,CACpD,GAAa,CACd,GAAG,IAAI,CAAC,UAAU,EAAE,aAAa,CAAC,QAAQ,CAAC,CAAC;iBAC9C;gBACD,OAAS,IAAoD,CAC3D,GAAa,CACd,CAAC;YACJ,CAAC,CAAC;SACH;QACD,OAAO,IAAI,KAAK,SAAS;YACvB,CAAC,CAAC,qBAAqB,CAAC,UAAU,EAAE,iBAA2B,EAAE,IAAI,CAAC;YACtE,CAAC,CAAC,uBAAuB,CAAC,UAAU,EAAE,iBAAiC,CAAC,CAAC;IAC7E,CAAC,CAAC;AACJ,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {ReactiveElement} from '../reactive-element.js';\nimport {\n  ClassElement,\n  legacyPrototypeMethod,\n  standardPrototypeMethod,\n} from './base.js';\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n *     once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function query(selector: string, cache?: boolean) {\n  return (\n    protoOrDescriptor: Object | ClassElement,\n    name?: PropertyKey\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any => {\n    const descriptor = {\n      get(this: ReactiveElement) {\n        return this.renderRoot?.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    if (cache) {\n      const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n      descriptor.get = function (this: ReactiveElement) {\n        if (\n          ((this as unknown) as {[key: string]: Element | null})[\n            key as string\n          ] === undefined\n        ) {\n          ((this as unknown) as {[key: string]: Element | null})[\n            key as string\n          ] = this.renderRoot?.querySelector(selector);\n        }\n        return ((this as unknown) as {[key: string]: Element | null})[\n          key as string\n        ];\n      };\n    }\n    return name !== undefined\n      ? legacyPrototypeMethod(descriptor, protoOrDescriptor as Object, name)\n      : standardPrototypeMethod(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n"]}