"use strict";
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * ReactiveElement patch to support browsers without native web components.
 *
 * This module should be used in addition to loading the web components
 * polyfills via @webcomponents/webcomponentjs. When using those polyfills
 * support for polyfilled Shadow DOM is automatic via the ShadyDOM polyfill, but
 * support for Shadow DOM like css scoping is opt-in. This module uses ShadyCSS
 * to scope styles defined via the `static styles` property.
 *
 * @packageDocumentation
 */
var _a;
const needsPlatformSupport = !!(window.ShadyCSS !== undefined &&
    (!window.ShadyCSS.nativeShadow || window.ShadyCSS.ApplyShim));
const SCOPED = '__scoped';
// eslint-disable-next-line @typescript-eslint/no-explicit-any
(_a = globalThis)['reactiveElementPlatformSupport'] ?? (_a['reactiveElementPlatformSupport'] = ({ ReactiveElement, }) => {
    if (!needsPlatformSupport) {
        return;
    }
    // console.log(
    //   '%c Making ReactiveElement compatible with ShadyDOM/CSS.',
    //   'color: lightgreen; font-style: italic'
    // );
    const elementProto = ReactiveElement.prototype;
    /**
     * Patch to apply adoptedStyleSheets via ShadyCSS
     */
    const createRenderRoot = elementProto.createRenderRoot;
    elementProto.createRenderRoot = function () {
        // Pass the scope to render options so that it gets to lit-html for proper
        // scoping via ShadyCSS.
        const name = this.localName;
        // If using native Shadow DOM must adoptStyles normally,
        // otherwise do nothing.
        if (window.ShadyCSS.nativeShadow) {
            return createRenderRoot.call(this);
        }
        else {
            if (!this.constructor.hasOwnProperty(SCOPED)) {
                this.constructor[SCOPED] = true;
                // Use ShadyCSS's `prepareAdoptedCssText` to shim adoptedStyleSheets.
                const css = this
                    .constructor.elementStyles.map((v) => v instanceof CSSStyleSheet
                    ? Array.from(v.cssRules).reduce((a, r) => (a += r.cssText), '')
                    : v.cssText);
                window.ShadyCSS?.ScopingShim?.prepareAdoptedCssText(css, name);
                if (this.constructor._$handlesPrepareStyles === undefined) {
                    window.ShadyCSS.prepareTemplateStyles(document.createElement('template'), name);
                }
            }
            return (this.shadowRoot ??
                this.attachShadow(this.constructor
                    .shadowRootOptions));
        }
    };
    /**
     * Patch connectedCallback to apply ShadyCSS custom properties shimming.
     */
    const connectedCallback = elementProto.connectedCallback;
    elementProto.connectedCallback = function () {
        connectedCallback.call(this);
        // Note, must do first update separately so that we're ensured
        // that rendering has completed before calling this.
        if (this.hasUpdated) {
            window.ShadyCSS.styleElement(this);
        }
    };
    /**
     * Patch update to apply ShadyCSS custom properties shimming for first
     * update.
     */
    const didUpdate = elementProto._$didUpdate;
    elementProto._$didUpdate = function (changedProperties) {
        const isFirstUpdate = !this.hasUpdated;
        didUpdate.call(this, changedProperties);
        // Note, must do first update here so rendering has completed before
        // calling this and styles are correct by updated/firstUpdated.
        if (isFirstUpdate) {
            window.ShadyCSS.styleElement(this);
        }
    };
});
//# sourceMappingURL=platform-support.js.map