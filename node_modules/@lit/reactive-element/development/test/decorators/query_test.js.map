{"version":3,"file":"query_test.js","sourceRoot":"","sources":["../../../src/test/decorators/query_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {query} from '../../decorators/query.js';\nimport {\n  canTestReactiveElement,\n  generateElementName,\n  RenderingElement,\n  html,\n} from '../test-helpers.js';\nimport {assert} from '@esm-bundle/chai';\n\n(canTestReactiveElement ? suite : suite.skip)('@query', () => {\n  let container: HTMLElement;\n  let el: C;\n\n  class C extends RenderingElement {\n    @query('#blah') div?: HTMLDivElement;\n    @query('span', true) span?: HTMLSpanElement;\n\n    static properties = {condition: {}};\n\n    condition = false;\n\n    render() {\n      return html`\n        <div>Not this one</div>\n        <div id=\"blah\">This one</div>\n        ${this.condition ? html`<span>Cached</span>` : ``}\n      `;\n    }\n  }\n  customElements.define(generateElementName(), C);\n\n  setup(async () => {\n    container = document.createElement('div');\n    container.id = 'test-container';\n    document.body.appendChild(container);\n    el = new C();\n    container.appendChild(el);\n    await el.updateComplete;\n  });\n\n  teardown(() => {\n    if (container !== undefined) {\n      container.parentElement!.removeChild(container);\n      (container as any) = undefined;\n    }\n  });\n\n  test('returns an element when it exists', () => {\n    const div = el.div;\n    assert.instanceOf(div, HTMLDivElement);\n    assert.equal(div!.innerText, 'This one');\n  });\n\n  test('returns null when no match', () => {\n    assert.isNull(el.span);\n  });\n\n  test('returns cached value', async () => {\n    el.condition = true;\n    await el.updateComplete;\n    assert.equal(el.span, el.renderRoot.querySelector('span'));\n    assert.instanceOf(el.span, HTMLSpanElement);\n    el.condition = false;\n    await el.updateComplete;\n    assert.instanceOf(el.span, HTMLSpanElement);\n    assert.notEqual(el.span, el.renderRoot.querySelector('span'));\n  });\n});\n"]}