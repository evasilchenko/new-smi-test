import { __decorate } from "tslib";
// TODO(sorvell): rollup problem: it's trying to import all of this from
// @lit/reactive-element, but importing separately works.
// import { LitElement, html, css, PropertyValues } from '../lit-element.js';
import { LitElement } from '../lit-element.js';
import { html } from 'lit-html';
import { css } from '@lit/reactive-element';
import { property } from '../decorators/property.js';
class AnotherElement extends LitElement {
    render() {
        return html `${this.localName} says hi`;
    }
}
AnotherElement.styles = css `
    :host {
      color: #03dac6;
    }
  `;
customElements.define('another-element', AnotherElement);
class MyElement extends LitElement {
    constructor() {
        super();
        this.foo = 'foo';
        this.nug = [1, 2, 3];
        this.whales = 0;
        this.addEventListener('click', async () => {
            this.whales++;
            await this.updateComplete;
            this.dispatchEvent(new CustomEvent('whales', { detail: { whales: this.whales } }));
            console.log(this.shadowRoot.querySelector('.count').textContent);
        });
    }
    render() {
        this.whales = Math.max(1, this.whales % 8);
        return html `
      <header>${this.localName}</header>
      <section @click="${(e) => console.log(this, e.target)}">
        Properties: foo: ${this.foo}, bar: ${this.bar}
      </section>
      <section class="content">
        <slot></slot>
      </section>
      <section>
        Composed element:
        <another-element></another-element>
      </section>
      <section class="count">Whales: ${'üê≥'.repeat(this.whales)}</section>
    `;
    }
    updated(changedProps) {
        console.log('updated!', changedProps);
    }
    firstUpdated(changedProps) {
        console.log('firstUpdated!', changedProps);
    }
}
MyElement.styles = css `
    :host {
      display: block;
      font-family: sans-serif;
      background: #000051;
      color: white;
      padding: 16px;
      margin: 8px;
      border: 4px solid #03dac6;
      border-radius: 4px;
    }

    .count {
      color: #03dac6;
    }

    .content {
      border: 1px solid #03dac6;
      border-radius: 4px;
      padding: 8px;
    }

    header {
      font-size: 2rem;
    }

    section {
      margin: 16px;
      font-size: 1.2rem;
    }
  `;
__decorate([
    property()
], MyElement.prototype, "foo", void 0);
__decorate([
    property()
], MyElement.prototype, "nug", void 0);
__decorate([
    property({ type: Number })
], MyElement.prototype, "whales", void 0);
__decorate([
    property()
], MyElement.prototype, "bar", void 0);
__decorate([
    property({
        converter: {
            fromAttribute: parseInt,
            toAttribute: (value) => value + '-attr',
        },
        reflect: true,
    })
], MyElement.prototype, "fooBar", void 0);
customElements.define('my-element', MyElement);
//# sourceMappingURL=my-element.js.map