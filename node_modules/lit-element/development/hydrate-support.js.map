{"version":3,"file":"hydrate-support.js","sourceRoot":"","sources":["../src/hydrate-support.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAEH;;;;GAIG;AAEH,OAAO,EAAiB,eAAe,EAAC,MAAM,uBAAuB,CAAC;AACtE,OAAO,EAAC,MAAM,EAAC,MAAM,UAAU,CAAC;AAChC,OAAO,EAAC,OAAO,EAAC,MAAM,qBAAqB,CAAC;AAS5C,8DAA8D;AAC7D,UAAkB,CAAC,0BAA0B,CAAC,GAAG,CAAC,EACjD,UAAU,GAGX,EAAE,EAAE;IACH,2CAA2C;IAC3C,MAAM,gBAAgB,GAAG,UAAU,CAAC,SAAS,CAAC,gBAAgB,CAAC;IAC/D,UAAU,CAAC,SAAS,CAAC,gBAAgB,GAAG;QACtC,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAC7B,OAAO,IAAI,CAAC,UAAU,CAAC;SACxB;aAAM;YACL,OAAO,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACpC;IACH,CAAC,CAAC;IAEF,sCAAsC;IACtC,UAAU,CAAC,SAAS,CAAC,MAAM,GAAG,UAAU,iBAAiC;QACvE,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAC5B,sDAAsD;QACtD,8DAA8D;QAC7D,eAAe,CAAC,SAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;QACxE,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;YAC9B,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;SACvD;aAAM;YACL,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;SACtD;IACH,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * LitElement support for hydration of content rendered using lit-ssr.\n *\n * @packageDocumentation\n */\n\nimport {PropertyValues, ReactiveElement} from '@lit/reactive-element';\nimport {render} from 'lit-html';\nimport {hydrate} from 'lit-html/hydrate.js';\n\ninterface PatchableLitElement extends HTMLElement {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-misused-new\n  new (...args: any[]): PatchableLitElement;\n  createRenderRoot(): Element | ShadowRoot;\n  _$needsHydration: boolean;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(globalThis as any)['litElementHydrateSupport'] = ({\n  LitElement,\n}: {\n  LitElement: PatchableLitElement;\n}) => {\n  // Capture whether we need hydration or not\n  const createRenderRoot = LitElement.prototype.createRenderRoot;\n  LitElement.prototype.createRenderRoot = function () {\n    if (this.shadowRoot) {\n      this._$needsHydration = true;\n      return this.shadowRoot;\n    } else {\n      return createRenderRoot.call(this);\n    }\n  };\n\n  // Hydrate on first update when needed\n  LitElement.prototype.update = function (changedProperties: PropertyValues) {\n    const value = this.render();\n    // Since this is a patch, we can't call super.update()\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (ReactiveElement.prototype as any).update.call(this, changedProperties);\n    if (this._$needsHydration) {\n      this._$needsHydration = false;\n      hydrate(value, this.renderRoot, this._$renderOptions);\n    } else {\n      render(value, this.renderRoot, this._$renderOptions);\n    }\n  };\n};\n"]}