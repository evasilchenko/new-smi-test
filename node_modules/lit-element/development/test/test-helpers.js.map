{"version":3,"file":"test-helpers.js","sourceRoot":"","sources":["../../src/test/test-helpers.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAEH,OAAO,EAAC,MAAM,EAAgB,MAAM,UAAU,CAAC;AAE/C,IAAI,KAAK,GAAG,CAAC,CAAC;AACd,MAAM,CAAC,MAAM,mBAAmB,GAAG,GAAG,EAAE,CAAC,KAAK,KAAK,EAAE,EAAE,CAAC;AAExD,MAAM,CAAC,MAAM,SAAS,GAAG,GAAG,EAAE,CAC5B,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC;AAE3D,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,OAAgB,EAAE,QAAgB,EAAE,EAAE,CAC1E,MAAM,CAAC,QAAQ;IACb,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,qBAAqB,CAAC,OAAO,EAAE,QAAQ,CAAC;IAC1D,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AAE3D,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAC,IAAY,EAAE,EAAE,CACtD,IAAI,CAAC,OAAO,CAAC,oCAAoC,EAAE,EAAE,CAAC,CAAC;AAEzD,6EAA6E;AAC7E,gEAAgE;AAChE,MAAM,CAAC,MAAM,iBAAiB,GAC5B,CAAC,MAAM,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC;IAC9C,MAAM,CAAC,yBAAyB,CAAC;AAMnC;;GAEG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,MAAe,EAAE,OAAgB,EAAE,EAAE;IACpE,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;QACvB,OAAO,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;KACtC;IACD,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,UAAW,EAAE;QAClC,KAAK,EAAE,OAAO,CAAC,SAAS;KACH,CAAC,CAAC;AAC3B,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {render, RenderOptions} from 'lit-html';\n\nlet count = 0;\nexport const generateElementName = () => `x-${count++}`;\n\nexport const nextFrame = () =>\n  new Promise((resolve) => requestAnimationFrame(resolve));\n\nexport const getComputedStyleValue = (element: Element, property: string) =>\n  window.ShadyCSS\n    ? window.ShadyCSS.getComputedStyleValue(element, property)\n    : getComputedStyle(element).getPropertyValue(property);\n\nexport const stripExpressionComments = (html: string) =>\n  html.replace(/<!--\\?lit\\$[0-9]+\\$-->|<!--\\??-->/g, '');\n\n// Only test LitElement if ShadowRoot is available and either ShadyDOM is not\n// in use or it is and LitElement platform support is available.\nexport const canTestLitElement =\n  (window.ShadowRoot && !window.ShadyDOM?.inUse) ||\n  window.litElementPlatformSupport;\n\nexport interface ShadyRenderOptions extends RenderOptions {\n  scope?: string;\n}\n\n/**\n * A helper for creating a shadowRoot on an element.\n */\nexport const renderShadowRoot = (result: unknown, element: Element) => {\n  if (!element.shadowRoot) {\n    element.attachShadow({mode: 'open'});\n  }\n  render(result, element.shadowRoot!, {\n    scope: element.localName,\n  } as ShadyRenderOptions);\n};\n"]}