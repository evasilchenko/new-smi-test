import{ReactiveElement as t}from"@lit/reactive-element";export*from"@lit/reactive-element";import{render as e,noChange as r}from"lit-html";export*from"lit-html";
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const i=t;(window.litElementVersions||(window.litElementVersions=[])).push("3.0.0-pre.2");class o extends t{constructor(){super(...arguments),this.I={host:this},this.Φt=void 0}createRenderRoot(){var t;const e=super.createRenderRoot();return(t=this.I).renderBefore??(t.renderBefore=e.firstChild),e}update(t){const r=this.render();super.update(t),this.Φt=e(r,this.renderRoot,this.I)}connectedCallback(){super.connectedCallback(),this.Φt?.setConnected(!0)}disconnectedCallback(){super.disconnectedCallback(),this.Φt?.setConnected(!1)}render(){return r}}o.finalized=!0,globalThis.litElementHydrateSupport?.({LitElement:o}),globalThis.litElementPlatformSupport?.({LitElement:o});const s={O:(t,e,r)=>{t.O(e,r)}};export{o as LitElement,i as UpdatingElement,s as _$private};
//# sourceMappingURL=lit-element.js.map
