/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
import { TemplateResult, ChildPart } from '../lit-html.js';
import { Directive, PartInfo } from '../directive.js';
/**
 * Enables fast switching between multiple templates by caching the DOM nodes
 * and TemplateInstances produced by the templates.
 *
 * Example:
 *
 * ```
 * let checked = false;
 *
 * html`
 *   ${cache(checked ? html`input is checked` : html`input is not checked`)}
 * `
 * ```
 */
export declare const cache: (v: unknown) => import("../directive.js").DirectiveResult<{
    new (partInfo: PartInfo): {
        templateCache: WeakMap<TemplateStringsArray, {
            readonly type: 2;
            readonly options: import("../lit-html.js").RenderOptions | undefined;
            _$committedValue: unknown;
            __directive?: Directive | undefined;
            _$startNode: ChildNode;
            _$endNode: ChildNode | null;
            _$parent: import("../lit-html.js").Disconnectable | undefined;
            _$disconnetableChildren?: Set<import("../lit-html.js").Disconnectable> | undefined;
            _$setChildPartConnected?: ((isConnected: boolean, removeFromParent?: boolean | undefined, from?: number | undefined) => void) | undefined;
            setConnected: (isConnected: boolean) => void;
            readonly parentNode: Node;
            _$setValue: (value: unknown, directiveParent?: import("../lit-html.js").DirectiveParent) => void;
            _$getTemplate: (strings: TemplateStringsArray, result: TemplateResult) => {
                _$element: HTMLTemplateElement;
                _parts: ({
                    readonly _type: 2;
                    readonly _index: number;
                } | {
                    readonly _type: 1;
                    readonly _index: number;
                    readonly _name: string;
                    readonly _constructor: new (element: HTMLElement, name: string, strings: readonly string[], parent: import("../lit-html.js").Disconnectable | undefined, options: import("../lit-html.js").RenderOptions | undefined) => {
                        readonly type: 1 | 5 | 4 | 3;
                        readonly element: HTMLElement;
                        readonly name: string;
                        readonly options: import("../lit-html.js").RenderOptions | undefined;
                        readonly strings?: readonly string[] | undefined;
                        _$committedValue: unknown;
                        __directives?: (Directive | undefined)[] | undefined;
                        _$parent: import("../lit-html.js").Disconnectable | undefined;
                        _$disconnetableChildren?: Set<import("../lit-html.js").Disconnectable> | undefined;
                        _setDirectiveConnected?: ((directive: Directive | undefined, isConnected: boolean, removeFromParent?: boolean | undefined) => void) | undefined;
                        readonly tagName: string;
                        _$setValue: (value: unknown, directiveParent?: import("../lit-html.js").DirectiveParent, valueIndex?: number | undefined, noCommit?: boolean | undefined) => void;
                        _commitValue: (value: unknown) => void;
                    };
                    readonly _strings: readonly string[];
                } | {
                    readonly _type: 6;
                    readonly _index: number;
                } | {
                    readonly _type: 7;
                    readonly _index: number;
                })[];
                _$options?: import("../lit-html.js").RenderOptions | undefined;
                _$createElement: (html: string) => HTMLTemplateElement;
            };
            _$clear: (start?: ChildNode | null, from?: number | undefined) => void;
        }>;
        value?: TemplateResult | undefined;
        render(v: unknown): unknown[];
        update(containerPart: ChildPart, [v]: [v: unknown]): unknown[];
        __part: {
            readonly type: 1 | 5 | 4 | 3;
            readonly element: HTMLElement;
            readonly name: string;
            readonly options: import("../lit-html.js").RenderOptions | undefined;
            readonly strings?: readonly string[] | undefined;
            _$committedValue: unknown;
            __directives?: (Directive | undefined)[] | undefined;
            _$parent: import("../lit-html.js").Disconnectable | undefined;
            _$disconnetableChildren?: Set<import("../lit-html.js").Disconnectable> | undefined;
            _setDirectiveConnected?: ((directive: Directive | undefined, isConnected: boolean, removeFromParent?: boolean | undefined) => void) | undefined;
            readonly tagName: string;
            _$setValue: (value: unknown, directiveParent?: import("../lit-html.js").DirectiveParent, valueIndex?: number | undefined, noCommit?: boolean | undefined) => void;
            _commitValue: (value: unknown) => void;
        } | {
            readonly type: 2;
            readonly options: import("../lit-html.js").RenderOptions | undefined;
            _$committedValue: unknown;
            __directive?: Directive | undefined;
            _$startNode: ChildNode;
            _$endNode: ChildNode | null;
            _$parent: import("../lit-html.js").Disconnectable | undefined;
            _$disconnetableChildren?: Set<import("../lit-html.js").Disconnectable> | undefined;
            _$setChildPartConnected?: ((isConnected: boolean, removeFromParent?: boolean | undefined, from?: number | undefined) => void) | undefined;
            setConnected: (isConnected: boolean) => void;
            readonly parentNode: Node;
            _$setValue: (value: unknown, directiveParent?: import("../lit-html.js").DirectiveParent) => void;
            _$getTemplate: (strings: TemplateStringsArray, result: TemplateResult) => {
                _$element: HTMLTemplateElement;
                _parts: ({
                    readonly _type: 2;
                    readonly _index: number;
                } | {
                    readonly _type: 1;
                    readonly _index: number;
                    readonly _name: string;
                    readonly _constructor: new (element: HTMLElement, name: string, strings: readonly string[], parent: import("../lit-html.js").Disconnectable | undefined, options: import("../lit-html.js").RenderOptions | undefined) => {
                        readonly type: 1 | 5 | 4 | 3;
                        readonly element: HTMLElement;
                        readonly name: string;
                        readonly options: import("../lit-html.js").RenderOptions | undefined;
                        readonly strings?: readonly string[] | undefined;
                        _$committedValue: unknown;
                        __directives?: (Directive | undefined)[] | undefined;
                        _$parent: import("../lit-html.js").Disconnectable | undefined;
                        _$disconnetableChildren?: Set<import("../lit-html.js").Disconnectable> | undefined;
                        _setDirectiveConnected?: ((directive: Directive | undefined, isConnected: boolean, removeFromParent?: boolean | undefined) => void) | undefined;
                        readonly tagName: string;
                        _$setValue: (value: unknown, directiveParent?: import("../lit-html.js").DirectiveParent, valueIndex?: number | undefined, noCommit?: boolean | undefined) => void;
                        _commitValue: (value: unknown) => void;
                    };
                    readonly _strings: readonly string[];
                } | {
                    readonly _type: 6;
                    readonly _index: number;
                } | {
                    readonly _type: 7;
                    readonly _index: number;
                })[];
                _$options?: import("../lit-html.js").RenderOptions | undefined;
                _$createElement: (html: string) => HTMLTemplateElement;
            };
            _$clear: (start?: ChildNode | null, from?: number | undefined) => void;
        } | {
            readonly type: 6;
            __directive?: Directive | undefined;
            _$committedValue: undefined;
            _$parent: import("../lit-html.js").Disconnectable | undefined;
            _$disconnetableChildren?: Set<import("../lit-html.js").Disconnectable> | undefined;
            _setDirectiveConnected?: ((directive: Directive | undefined, isConnected: boolean, removeFromParent?: boolean | undefined) => void) | undefined;
            options: import("../lit-html.js").RenderOptions | undefined;
            element: Element;
            _$setValue: (value: unknown) => void;
        };
        __attributeIndex: number | undefined;
        __directive?: Directive | undefined;
        _$parent: import("../lit-html.js").Disconnectable;
        _$disconnetableChildren?: Set<import("../lit-html.js").Disconnectable> | undefined;
        _$setDirectiveConnected?(isConnected: boolean): void;
        _resolve(props: unknown[]): unknown;
    };
}>;
//# sourceMappingURL=cache.d.ts.map