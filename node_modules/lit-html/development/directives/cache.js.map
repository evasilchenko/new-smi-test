{"version":3,"file":"cache.js","sourceRoot":"","sources":["../../src/directives/cache.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAEH,OAAO,EAA4B,MAAM,EAAE,OAAO,EAAC,MAAM,gBAAgB,CAAC;AAC1E,OAAO,EACL,SAAS,EACT,SAAS,GAGV,MAAM,iBAAiB,CAAC;AACzB,OAAO,EACL,SAAS,EACT,gBAAgB,EAChB,UAAU,EACV,gBAAgB,EAChB,gBAAgB,GACjB,MAAM,yBAAyB,CAAC;AAEjC;;;;;;;;;;;;;GAaG;AACH,MAAM,CAAC,MAAM,KAAK,GAAG,SAAS,CAC5B,KAAM,SAAQ,SAAS;IAIrB,YAAY,QAAkB;QAC5B,KAAK,CAAC,QAAQ,CAAC,CAAC;QAJlB,kBAAa,GAAG,IAAI,OAAO,EAAmC,CAAC;IAK/D,CAAC;IAED,MAAM,CAAC,CAAU;QACf,wEAAwE;QACxE,iDAAiD;QACjD,OAAO,CAAC,CAAC,CAAC,CAAC;IACb,CAAC;IAED,MAAM,CAAC,aAAwB,EAAE,CAAC,CAAC,CAA4B;QAC7D,sEAAsE;QACtE,wEAAwE;QACxE,kBAAkB;QAClB,IACE,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC;YAC5B,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,KAAK,CAAC,CAAC,OAAO,CAAC,EAC1D;YACA,4DAA4D;YAC5D,MAAM,SAAS,GAAG,gBAAgB,CAAC,aAAa,CAAqB,CAAC;YACtE,MAAM,SAAS,GAAG,SAAS,CAAC,GAAG,EAAG,CAAC;YACnC,IAAI,mBAAmB,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACrE,IAAI,mBAAmB,KAAK,SAAS,EAAE;gBACrC,MAAM,QAAQ,GAAG,QAAQ,CAAC,sBAAsB,EAAE,CAAC;gBACnD,mBAAmB,GAAG,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;gBAChD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;aACjE;YACD,kBAAkB;YAClB,gBAAgB,CAAC,mBAAmB,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;YACnD,UAAU,CAAC,mBAAmB,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;SACvD;QACD,sEAAsE;QACtE,sEAAsE;QACtE,uBAAuB;QACvB,IACE,gBAAgB,CAAC,CAAC,CAAC;YACnB,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,KAAK,CAAC,CAAC,OAAO,CAAC,EACnE;YACA,MAAM,mBAAmB,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YAC9D,IAAI,mBAAmB,KAAK,SAAS,EAAE;gBACrC,0DAA0D;gBAC1D,MAAM,SAAS,GAAG,gBAAgB,CAChC,mBAAmB,CACA,CAAC;gBACtB,MAAM,UAAU,GAAG,SAAS,CAAC,GAAG,EAAG,CAAC;gBACpC,iCAAiC;gBACjC,SAAS,CAAC,aAAa,CAAC,CAAC;gBACzB,UAAU,CAAC,aAAa,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;gBACjD,gBAAgB,CAAC,aAAa,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;aAC/C;YACD,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;SAChB;aAAM;YACL,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;SACxB;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC;CACF,CACF,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult, ChildPart, render, nothing} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n} from '../directive.js';\nimport {\n  clearPart,\n  getComittedValue,\n  insertPart,\n  isTemplateResult,\n  setComittedValue,\n} from '../directive-helpers.js';\n\n/**\n * Enables fast switching between multiple templates by caching the DOM nodes\n * and TemplateInstances produced by the templates.\n *\n * Example:\n *\n * ```\n * let checked = false;\n *\n * html`\n *   ${cache(checked ? html`input is checked` : html`input is not checked`)}\n * `\n * ```\n */\nexport const cache = directive(\n  class extends Directive {\n    templateCache = new WeakMap<TemplateStringsArray, ChildPart>();\n    value?: TemplateResult;\n\n    constructor(partInfo: PartInfo) {\n      super(partInfo);\n    }\n\n    render(v: unknown) {\n      // Return an array of the value to induce lit-html to create a ChildPart\n      // for the value that we can move into the cache.\n      return [v];\n    }\n\n    update(containerPart: ChildPart, [v]: DirectiveParameters<this>) {\n      // If the previous value is a TemplateResult and the new value is not,\n      // or is a different Template as the previous value, move the child part\n      // into the cache.\n      if (\n        isTemplateResult(this.value) &&\n        (!isTemplateResult(v) || this.value.strings !== v.strings)\n      ) {\n        // This is always an array because we return [v] in render()\n        const partValue = getComittedValue(containerPart) as Array<ChildPart>;\n        const childPart = partValue.pop()!;\n        let cachedContainerPart = this.templateCache.get(this.value.strings);\n        if (cachedContainerPart === undefined) {\n          const fragment = document.createDocumentFragment();\n          cachedContainerPart = render(nothing, fragment);\n          this.templateCache.set(this.value.strings, cachedContainerPart);\n        }\n        // Move into cache\n        setComittedValue(cachedContainerPart, [childPart]);\n        insertPart(cachedContainerPart, undefined, childPart);\n      }\n      // If the new value is a TemplateResult and the previous value is not,\n      // or is a different Template as the previous value, restore the child\n      // part from the cache.\n      if (\n        isTemplateResult(v) &&\n        (!isTemplateResult(this.value) || this.value.strings !== v.strings)\n      ) {\n        const cachedContainerPart = this.templateCache.get(v.strings);\n        if (cachedContainerPart !== undefined) {\n          // Move the cached part back into the container part value\n          const partValue = getComittedValue(\n            cachedContainerPart\n          ) as Array<ChildPart>;\n          const cachedPart = partValue.pop()!;\n          // Move cached part back into DOM\n          clearPart(containerPart);\n          insertPart(containerPart, undefined, cachedPart);\n          setComittedValue(containerPart, [cachedPart]);\n        }\n        this.value = v;\n      } else {\n        this.value = undefined;\n      }\n      return this.render(v);\n    }\n  }\n);\n"]}