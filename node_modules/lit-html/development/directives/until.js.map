{"version":3,"file":"until.js","sourceRoot":"","sources":["../../src/directives/until.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part, noChange} from '../lit-html.js';\nimport {directive} from '../directive.js';\nimport {isPrimitive} from '../directive-helpers.js';\nimport {DisconnectableDirective} from '../disconnectable-directive.js';\n\nconst DEV_MODE = true;\n\nif (DEV_MODE) {\n  console.warn(\n    'lit-html: The `until` directive is deprecated and will be removed in ' +\n      'the next major version.'\n  );\n}\n\ninterface AsyncState {\n  /**\n   * The last rendered index of a call to until(). A value only renders if its\n   * index is less than the `lastRenderedIndex`.\n   */\n  lastRenderedIndex: number;\n\n  values: unknown[];\n}\n\nconst isPromise = (x: unknown) => {\n  return !isPrimitive(x) && typeof (x as {then?: unknown}).then === 'function';\n};\n// Effectively infinity, but a SMI.\nconst _infinity = 0x7fffffff;\n\nclass UntilDirective extends DisconnectableDirective {\n  private _state: WeakMap<Part, AsyncState> = new WeakMap<Part, AsyncState>();\n\n  render(...args: Array<unknown>) {\n    return args.find((x) => !isPromise(x)) ?? noChange;\n  }\n\n  update(part: Part, args: Array<unknown>) {\n    let state = this._state.get(part)!;\n    if (state === undefined) {\n      state = {\n        lastRenderedIndex: _infinity,\n        values: [],\n      };\n      this._state.set(part, state);\n    }\n    const previousValues = state.values;\n    let previousLength = previousValues.length;\n    state.values = args;\n\n    for (let i = 0; i < args.length; i++) {\n      // If we've rendered a higher-priority value already, stop.\n      if (i > state.lastRenderedIndex) {\n        break;\n      }\n\n      const value = args[i];\n\n      // Render non-Promise values immediately\n      if (!isPromise(value)) {\n        state.lastRenderedIndex = i;\n        // Since a lower-priority value will never overwrite a higher-priority\n        // synchronous value, we can stop processing now.\n        return value;\n      }\n\n      // If this is a Promise we've already handled, skip it.\n      if (i < previousLength && value === previousValues[i]) {\n        continue;\n      }\n\n      // We have a Promise that we haven't seen before, so priorities may have\n      // changed. Forget what we rendered before.\n      state.lastRenderedIndex = _infinity;\n      previousLength = 0;\n\n      Promise.resolve(value).then((resolvedValue: unknown) => {\n        const index = state.values.indexOf(value);\n        // If state.values doesn't contain the value, we've re-rendered without\n        // the value, so don't render it. Then, only render if the value is\n        // higher-priority than what's already been rendered.\n        if (index > -1 && index < state.lastRenderedIndex) {\n          state.lastRenderedIndex = index;\n          this.setValue(resolvedValue);\n        }\n      });\n    }\n\n    return noChange;\n  }\n}\n\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n *     const content = fetch('./content.txt').then(r => r.text());\n *     html`${until(content, html`<span>Loading...</span>`)}`\n */\nexport const until = directive(UntilDirective);\n"]}