/**
 * @license
 * Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
import { Directive } from './directive.js';
import { AttributePart } from './lit-html.js';
/**
 * END USERS SHOULD NOT RELY ON THIS OBJECT.
 *
 * We currently do not make a mangled rollup build of the lit-ssr code. In order
 * to keep a number of (otherwise private) top-level exports  mangled in the
 * client side code, we export a _$private object containing those members (or
 * helper methods for accessing private fields of those members), and then
 * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the
 * client-side code is being used in `dev` mode or `prod` mode.
 *
 * @private
 */
export declare const _$private: {
    boundAttributeSuffix: string;
    marker: string;
    markerMatch: string;
    HTML_RESULT: number;
    getTemplateHtml: (strings: TemplateStringsArray, type: 2 | 1) => [string, string[]];
    patchDirectiveResolve: (directive: Directive, fn: (this: Directive, values: unknown[]) => unknown) => void;
    getAtributePartCommittedValue: (part: AttributePart, value: unknown, index: number | undefined) => unknown;
    resolveDirective: (part: {
        readonly type: 1 | 5 | 4 | 3;
        readonly element: HTMLElement;
        readonly name: string;
        readonly options: import("./lit-html.js").RenderOptions | undefined;
        readonly strings?: readonly string[] | undefined;
        _$committedValue: unknown;
        __directives?: (Directive | undefined)[] | undefined;
        _$parent: import("./lit-html.js").Disconnectable | undefined;
        _$disconnetableChildren?: Set<import("./lit-html.js").Disconnectable> | undefined;
        _setDirectiveConnected?: ((directive: Directive | undefined, isConnected: boolean, removeFromParent?: boolean | undefined) => void) | undefined;
        readonly tagName: string;
        _$setValue: (value: unknown, directiveParent?: import("./lit-html.js").DirectiveParent, valueIndex?: number | undefined, noCommit?: boolean | undefined) => void;
        _commitValue: (value: unknown) => void;
    } | {
        readonly type: 2;
        readonly options: import("./lit-html.js").RenderOptions | undefined;
        _$committedValue: unknown;
        __directive?: Directive | undefined;
        _$startNode: ChildNode;
        _$endNode: ChildNode | null;
        _$parent: import("./lit-html.js").Disconnectable | undefined;
        _$disconnetableChildren?: Set<import("./lit-html.js").Disconnectable> | undefined;
        _$setChildPartConnected?: ((isConnected: boolean, removeFromParent?: boolean | undefined, from?: number | undefined) => void) | undefined;
        setConnected: (isConnected: boolean) => void;
        readonly parentNode: Node;
        _$setValue: (value: unknown, directiveParent?: import("./lit-html.js").DirectiveParent) => void;
        _$getTemplate: (strings: TemplateStringsArray, result: import("./lit-html.js").TemplateResult) => {
            _$element: HTMLTemplateElement;
            _parts: ({
                readonly _type: 2;
                readonly _index: number;
            } | {
                readonly _type: 1;
                readonly _index: number;
                readonly _name: string;
                readonly _constructor: new (element: HTMLElement, name: string, strings: readonly string[], parent: import("./lit-html.js").Disconnectable | undefined, options: import("./lit-html.js").RenderOptions | undefined) => {
                    readonly type: 1 | 5 | 4 | 3;
                    readonly element: HTMLElement;
                    readonly name: string;
                    readonly options: import("./lit-html.js").RenderOptions | undefined;
                    readonly strings?: readonly string[] | undefined;
                    _$committedValue: unknown;
                    __directives?: (Directive | undefined)[] | undefined;
                    _$parent: import("./lit-html.js").Disconnectable | undefined;
                    _$disconnetableChildren?: Set<import("./lit-html.js").Disconnectable> | undefined;
                    _setDirectiveConnected?: ((directive: Directive | undefined, isConnected: boolean, removeFromParent?: boolean | undefined) => void) | undefined;
                    readonly tagName: string;
                    _$setValue: (value: unknown, directiveParent?: import("./lit-html.js").DirectiveParent, valueIndex?: number | undefined, noCommit?: boolean | undefined) => void;
                    _commitValue: (value: unknown) => void;
                };
                readonly _strings: readonly string[];
            } | {
                readonly _type: 6;
                readonly _index: number;
            } | {
                readonly _type: 7;
                readonly _index: number;
            })[];
            _$options?: import("./lit-html.js").RenderOptions | undefined;
            _$createElement: (html: string) => HTMLTemplateElement;
        };
        _$clear: (start?: ChildNode | null, from?: number | undefined) => void;
    } | {
        readonly type: 6;
        __directive?: Directive | undefined;
        _$committedValue: undefined;
        _$parent: import("./lit-html.js").Disconnectable | undefined;
        _$disconnetableChildren?: Set<import("./lit-html.js").Disconnectable> | undefined;
        _setDirectiveConnected?: ((directive: Directive | undefined, isConnected: boolean, removeFromParent?: boolean | undefined) => void) | undefined;
        options: import("./lit-html.js").RenderOptions | undefined;
        element: Element;
        _$setValue: (value: unknown) => void;
    }, value: unknown, _$parent?: import("./lit-html.js").DirectiveParent, _$attributeIndex?: number | undefined) => unknown;
    AttributePart: new (element: HTMLElement, name: string, strings: readonly string[], parent: import("./lit-html.js").Disconnectable | undefined, options: import("./lit-html.js").RenderOptions | undefined) => {
        readonly type: 1 | 5 | 4 | 3;
        readonly element: HTMLElement;
        readonly name: string;
        readonly options: import("./lit-html.js").RenderOptions | undefined;
        readonly strings?: readonly string[] | undefined;
        _$committedValue: unknown;
        __directives?: (Directive | undefined)[] | undefined;
        _$parent: import("./lit-html.js").Disconnectable | undefined;
        _$disconnetableChildren?: Set<import("./lit-html.js").Disconnectable> | undefined;
        _setDirectiveConnected?: ((directive: Directive | undefined, isConnected: boolean, removeFromParent?: boolean | undefined) => void) | undefined;
        readonly tagName: string;
        _$setValue: (value: unknown, directiveParent?: import("./lit-html.js").DirectiveParent, valueIndex?: number | undefined, noCommit?: boolean | undefined) => void;
        _commitValue: (value: unknown) => void;
    };
    PropertyPart: new (element: HTMLElement, name: string, strings: readonly string[], parent: import("./lit-html.js").Disconnectable | undefined, options: import("./lit-html.js").RenderOptions | undefined) => {
        readonly type: 1 | 5 | 4 | 3;
        readonly element: HTMLElement;
        readonly name: string;
        readonly options: import("./lit-html.js").RenderOptions | undefined;
        readonly strings?: readonly string[] | undefined;
        _$committedValue: unknown;
        __directives?: (Directive | undefined)[] | undefined;
        _$parent: import("./lit-html.js").Disconnectable | undefined;
        _$disconnetableChildren?: Set<import("./lit-html.js").Disconnectable> | undefined;
        _setDirectiveConnected?: ((directive: Directive | undefined, isConnected: boolean, removeFromParent?: boolean | undefined) => void) | undefined;
        readonly tagName: string;
        _$setValue: (value: unknown, directiveParent?: import("./lit-html.js").DirectiveParent, valueIndex?: number | undefined, noCommit?: boolean | undefined) => void;
        _commitValue: (value: unknown) => void;
    };
    BooleanAttributePart: new (element: HTMLElement, name: string, strings: readonly string[], parent: import("./lit-html.js").Disconnectable | undefined, options: import("./lit-html.js").RenderOptions | undefined) => {
        readonly type: 1 | 5 | 4 | 3;
        readonly element: HTMLElement;
        readonly name: string;
        readonly options: import("./lit-html.js").RenderOptions | undefined;
        readonly strings?: readonly string[] | undefined;
        _$committedValue: unknown;
        __directives?: (Directive | undefined)[] | undefined;
        _$parent: import("./lit-html.js").Disconnectable | undefined;
        _$disconnetableChildren?: Set<import("./lit-html.js").Disconnectable> | undefined;
        _setDirectiveConnected?: ((directive: Directive | undefined, isConnected: boolean, removeFromParent?: boolean | undefined) => void) | undefined;
        readonly tagName: string;
        _$setValue: (value: unknown, directiveParent?: import("./lit-html.js").DirectiveParent, valueIndex?: number | undefined, noCommit?: boolean | undefined) => void;
        _commitValue: (value: unknown) => void;
    };
    EventPart: new (element: HTMLElement, name: string, strings: readonly string[], parent: import("./lit-html.js").Disconnectable | undefined, options: import("./lit-html.js").RenderOptions | undefined) => {
        readonly type: 1 | 5 | 4 | 3;
        readonly element: HTMLElement;
        readonly name: string;
        readonly options: import("./lit-html.js").RenderOptions | undefined;
        readonly strings?: readonly string[] | undefined;
        _$committedValue: unknown;
        __directives?: (Directive | undefined)[] | undefined;
        _$parent: import("./lit-html.js").Disconnectable | undefined;
        _$disconnetableChildren?: Set<import("./lit-html.js").Disconnectable> | undefined;
        _setDirectiveConnected?: ((directive: Directive | undefined, isConnected: boolean, removeFromParent?: boolean | undefined) => void) | undefined;
        readonly tagName: string;
        _$setValue: (value: unknown, directiveParent?: import("./lit-html.js").DirectiveParent, valueIndex?: number | undefined, noCommit?: boolean | undefined) => void;
        _commitValue: (value: unknown) => void;
    };
};
//# sourceMappingURL=private-ssr-support.d.ts.map