{"version":3,"file":"private-ssr-support.js","sourceRoot":"","sources":["../src/private-ssr-support.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAGH,OAAO,EAAC,SAAS,IAAI,CAAC,EAAiB,QAAQ,EAAC,MAAM,eAAe,CAAC;AAEtE;;;;;;;;;;;GAWG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG;IACvB,oBAAoB,EAAE,CAAC,CAAC,qBAAqB;IAC7C,MAAM,EAAE,CAAC,CAAC,OAAO;IACjB,WAAW,EAAE,CAAC,CAAC,YAAY;IAC3B,WAAW,EAAE,CAAC,CAAC,YAAY;IAC3B,eAAe,EAAE,CAAC,CAAC,gBAAgB;IACnC,qBAAqB,EAAE,CACrB,SAAoB,EACpB,EAAmD,EACnD,EAAE;QACF,SAAS,CAAC,QAAQ,GAAG,EAAE,CAAC;IAC1B,CAAC;IACD,6BAA6B,EAAE,CAC7B,IAAmB,EACnB,KAAc,EACd,KAAyB,EACzB,EAAE;QACF,uEAAuE;QACvE,qEAAqE;QACrE,IAAI,cAAc,GAAY,QAAQ,CAAC;QACvC,IAAI,CAAC,YAAY,GAAG,CAAC,KAAc,EAAE,EAAE,CAAC,CAAC,cAAc,GAAG,KAAK,CAAC,CAAC;QACjE,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QACpC,OAAO,cAAc,CAAC;IACxB,CAAC;IACD,gBAAgB,EAAE,CAAC,CAAC,iBAAiB;IACrC,aAAa,EAAE,CAAC,CAAC,cAAc;IAC/B,YAAY,EAAE,CAAC,CAAC,aAAa;IAC7B,oBAAoB,EAAE,CAAC,CAAC,qBAAqB;IAC7C,SAAS,EAAE,CAAC,CAAC,UAAU;CACxB,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2019 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Directive} from './directive.js';\nimport {_$private as p, AttributePart, noChange} from './lit-html.js';\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$private object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * @private\n */\nexport const _$private = {\n  boundAttributeSuffix: p._boundAttributeSuffix,\n  marker: p._marker,\n  markerMatch: p._markerMatch,\n  HTML_RESULT: p._HTML_RESULT,\n  getTemplateHtml: p._getTemplateHtml,\n  patchDirectiveResolve: (\n    directive: Directive,\n    fn: (this: Directive, values: unknown[]) => unknown\n  ) => {\n    directive._resolve = fn;\n  },\n  getAtributePartCommittedValue: (\n    part: AttributePart,\n    value: unknown,\n    index: number | undefined\n  ) => {\n    // Use the part setter to resolve directives/concatenate multiple parts\n    // into a final value (captured by passing in a commitValue override)\n    let committedValue: unknown = noChange;\n    part._commitValue = (value: unknown) => (committedValue = value);\n    part._$setValue(value, part, index);\n    return committedValue;\n  },\n  resolveDirective: p._resolveDirective,\n  AttributePart: p._AttributePart,\n  PropertyPart: p._PropertyPart,\n  BooleanAttributePart: p._BooleanAttributePart,\n  EventPart: p._EventPart,\n};\n"]}