{"version":3,"file":"directive.js","sources":["src/directive.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {\n  _$private,\n  AttributePart,\n  Disconnectable,\n  ChildPart,\n  Part,\n  ElementPart,\n} from './lit-html';\n\nconst resolveDirective = _$private._resolveDirective;\n\nexport type DirectiveClass = {\n  new (part: PartInfo): Directive;\n};\n\n/**\n * This utility type extracts the signature of a directive class's render()\n * method so we can use it for the type of the generated directive function.\n */\nexport type DirectiveParameters<C extends Directive> = Parameters<C['render']>;\n\n/**\n * A generated directive function doesn't evaluate the directive, but just\n * returns a DirectiveResult object that captures the arguments.\n * @internal\n */\nexport type DirectiveResult<C extends DirectiveClass = DirectiveClass> = {\n  _$litDirective$: C;\n  values: DirectiveParameters<InstanceType<C>>;\n};\n\nexport const PartType = {\n  ATTRIBUTE: 1,\n  CHILD: 2,\n  PROPERTY: 3,\n  BOOLEAN_ATTRIBUTE: 4,\n  EVENT: 5,\n  ELEMENT: 6,\n} as const;\n\nexport type PartType = typeof PartType[keyof typeof PartType];\n\nexport type ChildPartInfo = {\n  readonly type: typeof PartType.CHILD;\n  readonly _$part: ChildPart;\n  readonly _$parent: Disconnectable;\n  readonly _$attributeIndex: number | undefined;\n};\n\nexport type AttributePartInfo = {\n  readonly type:\n    | typeof PartType.ATTRIBUTE\n    | typeof PartType.PROPERTY\n    | typeof PartType.BOOLEAN_ATTRIBUTE\n    | typeof PartType.EVENT;\n  readonly strings?: ReadonlyArray<string>;\n  readonly name: string;\n  readonly tagName: string;\n  readonly _$part: AttributePart;\n  readonly _$parent: Disconnectable;\n  readonly _$attributeIndex: number | undefined;\n};\n\nexport type ElementPartInfo = {\n  readonly type: typeof PartType.ELEMENT;\n  readonly _$part: ElementPart;\n  readonly _$parent: Disconnectable;\n  readonly _$attributeIndex: undefined;\n};\n\n/**\n * Information about the part a directive is bound to.\n *\n * This is useful for checking that a directive is attached to a valid part,\n * such as with directive that can only be used on attribute bindings.\n */\nexport type PartInfo = ChildPartInfo | AttributePartInfo | ElementPartInfo;\n\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive = <C extends DirectiveClass>(c: C) => (\n  ...values: DirectiveParameters<InstanceType<C>>\n): DirectiveResult<C> => ({\n  _$litDirective$: c,\n  values,\n});\n\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport abstract class Directive {\n  //@internal\n  __part: ChildPart | AttributePart | ElementPart;\n  //@internal\n  __attributeIndex: number | undefined;\n  //@internal\n  __directive?: Directive;\n\n  //@internal\n  _$parent: Disconnectable;\n\n  // These will only exist on the DisconnectableDirective subclass\n  //@internal\n  _$disconnetableChildren?: Set<Disconnectable>;\n  //@internal\n  _$setDirectiveConnected?(isConnected: boolean): void;\n\n  constructor(partInfo: PartInfo) {\n    this._$parent = partInfo._$parent;\n    this.__part = partInfo._$part;\n    this.__attributeIndex = partInfo._$attributeIndex;\n  }\n  /** @internal */\n  _resolve(props: Array<unknown>): unknown {\n    const {__part, __attributeIndex} = this;\n    return resolveDirective(\n      __part,\n      this.update(__part, props),\n      this,\n      __attributeIndex\n    );\n  }\n  abstract render(...props: Array<unknown>): unknown;\n  update(_part: Part, props: Array<unknown>): unknown {\n    return this.render(...props);\n  }\n}\n"],"names":["resolveDirective","_$private","_resolveDirective","PartType","ATTRIBUTE","CHILD","PROPERTY","BOOLEAN_ATTRIBUTE","EVENT","ELEMENT","directive","c","values","_$litDirective$","Directive","[object Object]","partInfo","this","_$parent","__part","_$part","__attributeIndex","_$attributeIndex","props","Σ_t","Σyt","update","_part","render"],"mappings":";;;;;;;;;;;;;GAuBA,MAAMA,EAAmBC,EAAUC,GAsBtBC,EAAW,CACtBC,UAAW,EACXC,MAAO,EACPC,SAAU,EACVC,kBAAmB,EACnBC,MAAO,EACPC,QAAS,GA6CEC,EAAuCC,GAAS,IACxDC,MAEHC,gBAAiBF,EACjBC,OAAAA,UAQoBE,EAiBpBC,YAAYC,GACVC,KAAKC,EAAWF,EAASE,EACzBD,KAAKE,IAASH,EAASI,EACvBH,KAAKI,IAAmBL,EAASM,EAGnCP,EAASQ,GACP,MAAMC,IAACL,EAAMM,IAAEJ,GAAoBJ,KACnC,OAAOjB,EACLmB,EACAF,KAAKS,OAAOP,EAAQI,GACpBN,KACAI,GAIJN,OAAOY,EAAaJ,GAClB,OAAON,KAAKW,UAAUL"}