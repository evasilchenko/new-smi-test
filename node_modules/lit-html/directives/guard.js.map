{"version":3,"file":"guard.js","sources":["../src/directives/guard.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {noChange, Part} from '../lit-html.js';\nimport {directive, Directive, DirectiveParameters} from '../directive.js';\n\n// A sentinal that indicates guard() hasn't rendered anything yet\nconst initialValue = {};\n\nclass Guard extends Directive {\n  previousValue: unknown = initialValue;\n\n  render(_value: unknown, f: () => unknown) {\n    return f();\n  }\n\n  update(_part: Part, [value, f]: DirectiveParameters<this>) {\n    if (Array.isArray(value)) {\n      // Dirty-check arrays by item\n      if (\n        Array.isArray(this.previousValue) &&\n        this.previousValue.length === value.length &&\n        value.every((v, i) => v === (this.previousValue as Array<unknown>)[i])\n      ) {\n        return noChange;\n      }\n    } else if (this.previousValue === value) {\n      // Dirty-check non-arrays by identity\n      return noChange;\n    }\n\n    // Copy the value if it's an array so that if it's mutated we don't forget\n    // what the previous values were.\n    this.previousValue = Array.isArray(value) ? Array.from(value) : value;\n    const r = this.render(value, f);\n    return r;\n  }\n}\n\n/**\n * Prevents re-render of a template function until a single value or an array of\n * values changes.\n *\n * Values are checked against previous values with strict equality (`===`), and\n * so the check won't detect nested property changes inside objects or arrays.\n * Arrays values have each item checked against the previous value at the same\n * index with strict equality. Nested arrays are also checked only by strict\n * equality.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([user.id, company.id], () => html`...`)}\n *   </div>\n * ```\n *\n * In this case, the template only rerenders if either `user.id` or `company.id`\n * changes.\n *\n * guard() is useful with immutable data patterns, by preventing expensive work\n * until data updates.\n *\n * Example:\n *\n * ```js\n * html`\n *   <div>\n *     ${guard([immutableItems], () => immutableItems.map(i => html`${i}`))}\n *   </div>\n * ```\n *\n * In this case, items are mapped over only when the array reference changes.\n *\n * @param value the value to check before re-rendering\n * @param f the template function\n */\nexport const guard = directive(Guard);\n"],"names":["initialValue","guard","directive","Directive","[object Object]","this","_value","f","_part","value","Array","isArray","previousValue","length","every","v","i","noChange","from","render"],"mappings":";;;;;;;;;;;;;;AAkBA,MAAMA,EAAe,GAuERC,EAAQC,EArErB,cAAoBC,EAApBC,kCACEC,mBAAyBL,EAEzBI,OAAOE,EAAiBC,GACtB,OAAOA,IAGTH,OAAOI,GAAcC,EAAOF,IAC1B,GAAIG,MAAMC,QAAQF,IAEhB,GACEC,MAAMC,QAAQN,KAAKO,gBACnBP,KAAKO,cAAcC,SAAWJ,EAAMI,QACpCJ,EAAMK,OAAM,CAACC,EAAGC,IAAMD,IAAOV,KAAKO,cAAiCI,KAEnE,OAAOC,OAEJ,GAAIZ,KAAKO,gBAAkBH,EAEhC,OAAOQ,EAOT,OAFAZ,KAAKO,cAAgBF,MAAMC,QAAQF,GAASC,MAAMQ,KAAKT,GAASA,EACtDJ,KAAKc,OAAOV,EAAOF"}