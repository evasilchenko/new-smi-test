{"version":3,"file":"unsafe-html.js","sources":["../src/directives/unsafe-html.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {nothing, TemplateResult, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\n\nconst HTML_RESULT = 1;\n\nexport class UnsafeHTML extends Directive {\n  static directiveName = 'unsafeHTML';\n  static resultType = HTML_RESULT;\n\n  value: unknown = nothing;\n  templateResult?: TemplateResult;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTML).directiveName\n        }() can only be used in child bindings`\n      );\n    }\n  }\n\n  render(value: string | typeof nothing | typeof noChange) {\n    // TODO: add tests for nothing and noChange\n    if (value === nothing) {\n      this.templateResult = undefined;\n      return (this.value = value);\n    }\n    if (value === noChange) {\n      return value;\n    }\n    if (typeof value != 'string') {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTML).directiveName\n        }() called with a non-string value`\n      );\n    }\n    if (value === this.value) {\n      return this.templateResult;\n    }\n    this.value = value;\n    const strings = ([value] as unknown) as TemplateStringsArray;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (strings as any).raw = strings;\n    // WARNING: impersonating a TemplateResult like this is extremely\n    // dangerous. Third-party directives should not do this.\n    return (this.templateResult = {\n      // Cast to a known set of integers that satisfy ResultType so that we\n      // don't have to export ResultType and possibly encourage this pattern.\n      _$litType$: (this.constructor as typeof UnsafeHTML).resultType as 1 | 2,\n      strings,\n      values: [],\n    });\n  }\n}\n\n/**\n * Renders the result as HTML, rather than text.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTML);\n"],"names":["UnsafeHTML","Directive","[object Object]","partInfo","super","this","nothing","type","PartType","CHILD","Error","constructor","directiveName","value","templateResult","undefined","noChange","strings","raw","_$litType$","resultType","values","unsafeHTML","directive"],"mappings":";;;;;;;;;;;;;SAmBaA,UAAmBC,EAO9BC,YAAYC,GAEV,GADAC,MAAMD,GAJRE,WAAiBC,EAKXH,EAASI,OAASC,EAASC,MAC7B,MAAUC,MAELL,KAAKM,YAAkCC,cAD1C,yCAONV,OAAOW,GAEL,GAAIA,IAAUP,EAEZ,OADAD,KAAKS,oBAAiBC,EACdV,KAAKQ,MAAQA,EAEvB,GAAIA,IAAUG,EACZ,OAAOH,EAET,GAAoB,iBAATA,EACT,MAAUH,MAELL,KAAKM,YAAkCC,cAD1C,qCAKJ,GAAIC,IAAUR,KAAKQ,MACjB,OAAOR,KAAKS,eAEdT,KAAKQ,MAAQA,EACb,MAAMI,EAAW,CAACJ,GAKlB,OAHCI,EAAgBC,IAAMD,EAGfZ,KAAKS,eAAiB,CAG5BK,WAAad,KAAKM,YAAkCS,WACpDH,QAAAA,EACAI,OAAQ,KA/CLrB,gBAAgB,aAChBA,aAJW,QA8DPsB,EAAaC,EAAUvB"}