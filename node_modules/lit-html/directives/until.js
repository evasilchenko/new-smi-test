import{noChange as e}from"../lit-html.js";import{directive as t}from"../directive.js";import{isPrimitive as r}from"../directive-helpers.js";import{DisconnectableDirective as s}from"../disconnectable-directive.js";
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const o=e=>!r(e)&&"function"==typeof e.then,i=t(class extends s{constructor(){super(...arguments),this.kt=new WeakMap}render(...t){return t.find((e=>!o(e)))??e}update(t,r){let s=this.kt.get(t);void 0===s&&(s={lastRenderedIndex:2147483647,values:[]},this.kt.set(t,s));const i=s.values;let n=i.length;s.values=r;for(let e=0;e<r.length&&!(e>s.lastRenderedIndex);e++){const t=r[e];if(!o(t))return s.lastRenderedIndex=e,t;e<n&&t===i[e]||(s.lastRenderedIndex=2147483647,n=0,Promise.resolve(t).then((e=>{const r=s.values.indexOf(t);r>-1&&r<s.lastRenderedIndex&&(s.lastRenderedIndex=r,this.setValue(e))})))}return e}});export{i as until};
//# sourceMappingURL=until.js.map
