import{noChange as t}from"./lit-html.js";import{Directive as i,PartType as e}from"./directive.js";export{directive}from"./directive.js";import{isSingleExpression as s}from"./directive-helpers.js";
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */const r=(t,i)=>{const e=t.Q;if(void 0===e)return!1;for(const t of e)t.R?.(i,!1),r(t,i);return!0},o=t=>{let i,e;do{if(void 0===(i=t.P))break;e=i.Q,e.delete(t),t=i}while(0===e?.size)};function h(t,i=!1,e=0){const s=this.L,h=this.Q;if(void 0!==h&&0!==h.size)if(i)if(Array.isArray(s))for(let t=e;t<s.length;t++)r(s[t],!1),o(s[t]);else null!=s&&(r(s,!1),o(s));else r(this,t)}class c extends i{constructor(i){super(i),this.isConnected=!0,this.bt=t,this.Q=void 0,this.P=i.P;for(let t,i=this;t=i.P;i=t){let o=t.Q;if(void 0===o)t.Q=o=new Set;else if(o.has(i))break;o.add(i),r=void 0,(s=t).type==e.CHILD&&((r=s).S??(r.S=h))}var s,r}R(t,i=!0){this.$t(t),i&&(r(this,t),o(this))}$t(i){i!==this.isConnected&&(i?(this.isConnected=!0,this.bt!==t&&(this.setValue(this.bt),this.bt=t),this.reconnectedCallback?.()):(this.isConnected=!1,this.disconnectedCallback?.()))}k(t){if(!this.isConnected)throw Error(`DisconnectableDirective ${this.constructor.name} was rendered while its tree was disconnected.`);return super.k(t)}setValue(t){if(this.isConnected)if(s(this.Σ_t))this.Σ_t.M(t,this);else{const i=[...this.Σ_t.L];i[this.Σyt]=t,this.Σ_t.M(i,this,0)}else this.bt=t}disconnectedCallback(){}reconnectedCallback(){}}export{c as DisconnectableDirective};
//# sourceMappingURL=disconnectable-directive.js.map
