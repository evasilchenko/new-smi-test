{"version":3,"file":"disconnectable-directive.js","sources":["src/disconnectable-directive.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Overview:\n *\n * This module is designed to add `disconnectedCallback` support to directives\n * with the least impact on the core runtime or payload when that feature is not\n * used.\n *\n * The strategy is to introduce a `DisconnectableDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnectedCallback`.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `DisconnectableDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `DisconnectableDirective` directly or transitively via its children. In order\n * disconnect (or reconnect) a tree, the `_$setChildPartConnected` API is patched\n * onto ChildParts as a directive climbs the parent tree, which is called by the\n * core when clearing a part if it exists. When called, that method iterates\n * over the sparse tree of Set<DisconnectableChildren> built up by\n * DisconnectableDirectives, and calls `_$setDirectiveConnected` on any\n * directives that are encountered in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     DisconnectableDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           DisconnectableDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           DisconnectableDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              DisconnectableDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           DisconnectableDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           DisconnectableDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                DisconnectableDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      DisconnectableDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      DisconnectableDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         DisconnectableDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      DisconnectableDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$setChildPartConnected()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$setChildPartConnected()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnectd: true` down the tree, signaling which callback to run.\n */\n\nimport {\n  AttributePart,\n  ChildPart,\n  Disconnectable,\n  noChange,\n} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport {directive} from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnectedCallback`/\n * `reconnectedCallback`s.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst setChildrenConnected = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnetableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$setDirectiveConnected` is used as a \"brand\" to\n    // disambiguate DisconnectableDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$setChildPartConnected`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    (obj as DisconnectableDirective)._$setDirectiveConnected?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    setChildrenConnected(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnetableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of ChildParts)\n * and runs their `disconnectedCallback`/`reconnectedCallback`s, as well as\n * within any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction setChildPartConnected(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnetableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        setChildrenConnected(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      setChildrenConnected(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    setChildrenConnected(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$setChildPartConnected ??= setChildPartConnected;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnectedCallback` will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setDirectiveConnection(false)` on\n * a part that was previously rendered containing the directive.\n *\n * If `part.setDirectiveConnection(true)` is subsequently called on a containing\n * part, the directive's `reconnectedCallback` will be called prior to its next\n * `update`/`render` callbacks. When implementing `disconnectedCallback`,\n * `reconnectedCallback` should also be implemented to be compatible with\n * reconnection.\n */\nexport abstract class DisconnectableDirective extends Directive {\n  isConnected = true;\n  _pendingValue: unknown = noChange;\n  _$disconnetableChildren?: Set<Disconnectable> = undefined;\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    this._$parent = partInfo._$parent;\n    // Climb the parent tree, creating a sparse tree of children needing\n    // disconnection\n    for (\n      let current = this as Disconnectable, parent;\n      (parent = current._$parent);\n      current = parent\n    ) {\n      let children = parent._$disconnetableChildren;\n      if (children === undefined) {\n        parent._$disconnetableChildren = children = new Set();\n      } else if (children.has(current)) {\n        // Once we've reached a parent that already contains this child, we\n        // can short-circuit\n        break;\n      }\n      children.add(current);\n      installDisconnectAPI(parent);\n    }\n  }\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  _$setDirectiveConnected(isConnected: boolean, isClearingDirective = true) {\n    this._setConnected(isConnected);\n    if (isClearingDirective) {\n      setChildrenConnected(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n  /**\n   * Private method used to set the connection state of the directive and\n   * call the respective `disconnectedCallback` or `reconnectedCallback`\n   * callback. Note that since `isConnected` defaults to true, we do not run\n   * `reconnectedCallback` on first render.\n   *\n   * If a call to `setValue` was made while disconnected, flush it to the part\n   * before reconnecting.\n   *\n   * @param isConnected\n   * @internal\n   */\n  private _setConnected(isConnected: boolean) {\n    if (isConnected !== this.isConnected) {\n      if (isConnected) {\n        this.isConnected = true;\n        if (this._pendingValue !== noChange) {\n          this.setValue(this._pendingValue);\n          this._pendingValue = noChange;\n        }\n        this.reconnectedCallback?.();\n      } else {\n        this.isConnected = false;\n        this.disconnectedCallback?.();\n      }\n    }\n  }\n  /**\n   * Override of the base `_resolve` method to ensure `reconnectedCallback` is\n   * run prior to the next render.\n   *\n   * @override\n   * @internal\n   */\n  _resolve(props: Array<unknown>): unknown {\n    if (!this.isConnected) {\n      throw new Error(\n        `DisconnectableDirective ${this.constructor.name} was ` +\n          `rendered while its tree was disconnected.`\n      );\n    }\n    return super._resolve(props);\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * If the method is called while the part is disconnected, the value will be\n   * queued until directive is reconnected.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (this.isConnected) {\n      if (isSingleExpression((this.__part as unknown) as PartInfo)) {\n        this.__part._$setValue(value, this);\n      } else {\n        // this.__attributeIndex will be defined in this case, but\n        // assert it in dev mode\n        if (DEV_MODE && this.__attributeIndex === undefined) {\n          throw new Error(`Expected this.__attributeIndex to be a number`);\n        }\n        const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n        newValues[this.__attributeIndex!] = value;\n        (this.__part as AttributePart)._$setValue(newValues, this, 0);\n      }\n    } else {\n      this._pendingValue = value;\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnectedCallback` should also be implemented to restore\n   * working state of the directive prior to the next render.\n   */\n  protected disconnectedCallback() {}\n  protected reconnectedCallback() {}\n}\n"],"names":["setChildrenConnected","parent","isConnected","children","_$disconnetableChildren","undefined","obj","_$setDirectiveConnected","removeDisconnectableFromParent","_$parent","delete","size","setChildPartConnected","isClearingValue","fromPartIndex","value","this","_$committedValue","Array","isArray","i","length","DisconnectableDirective","Directive","[object Object]","partInfo","super","noChange","current","Set","has","add","type","PartType","CHILD","_$setChildPartConnected","isClearingDirective","_setConnected","_pendingValue","setValue","reconnectedCallback","disconnectedCallback","props","Error","constructor","name","_resolve","isSingleExpression","__part","_$setValue","newValues","__attributeIndex"],"mappings":";;;;;;;;;;;;;GAkJA,MAAMA,EAAuB,CAC3BC,EACAC,KAEA,MAAMC,EAAWF,EAAOG,EACxB,QAAiBC,IAAbF,EACF,OAAO,EAET,IAAK,MAAMG,KAAOH,EAQfG,EAAgCC,IAC/BL,GACA,GAGFF,EAAqBM,EAAKJ,GAE5B,OAAO,GASHM,EAAkCF,IACtC,IAAIL,EAAQE,EACZ,EAAG,CACD,QAAgCE,KAA3BJ,EAASK,EAAIG,GAChB,MAEFN,EAAWF,EAAOG,EAClBD,EAASO,OAAOJ,GAChBA,EAAML,QACoB,IAAnBE,GAAUQ,OAwBrB,SAASC,EAEPV,EACAW,GAAkB,EAClBC,EAAgB,GAEhB,MAAMC,EAAQC,KAAKC,EACbd,EAAWa,KAAKZ,EACtB,QAAiBC,IAAbF,GAA4C,IAAlBA,EAASQ,KAGvC,GAAIE,EACF,GAAIK,MAAMC,QAAQJ,GAIhB,IAAK,IAAIK,EAAIN,EAAeM,EAAIL,EAAMM,OAAQD,IAC5CpB,EAAqBe,EAAMK,IAAI,GAC/BZ,EAA+BO,EAAMK,SAErB,MAATL,IAITf,EAAqBe,GAAyB,GAC9CP,EAA+BO,SAGjCf,EAAqBgB,KAAMd,SAyBToB,UAAgCC,EAIpDC,YAAYC,GACVC,MAAMD,GAJRT,kBAAc,EACdA,QAAyBW,EACzBX,YAAgDX,EAG9CW,KAAKP,EAAWgB,EAAShB,EAGzB,IACE,IAAsCR,EAAlC2B,EAAUZ,KACbf,EAAS2B,EAAQnB,EAClBmB,EAAU3B,EACV,CACA,IAAIE,EAAWF,EAAOG,EACtB,QAAiBC,IAAbF,EACFF,EAAOG,EAA0BD,EAAW,IAAI0B,SAC3C,GAAI1B,EAAS2B,IAAIF,GAGtB,MAEFzB,EAAS4B,IAAIH,aAxCWtB,EAyCHL,GAxCF+B,MAAQC,EAASC,WACrC5B,GAAkB6B,MAAAA,EAA4BvB,IAFtB,IAACN,IAwD5BkB,EAAwBtB,EAAsBkC,GAAsB,GAClEpB,KAAKqB,GAAcnC,GACfkC,IACFpC,EAAqBgB,KAAMd,GAC3BM,EAA+BQ,OAe3BQ,GAActB,GAChBA,IAAgBc,KAAKd,cACnBA,GACFc,KAAKd,aAAc,EACfc,KAAKsB,KAAkBX,IACzBX,KAAKuB,SAASvB,KAAKsB,IACnBtB,KAAKsB,GAAgBX,GAEvBX,KAAKwB,0BAELxB,KAAKd,aAAc,EACnBc,KAAKyB,2BAWXjB,EAASkB,GACP,IAAK1B,KAAKd,YACR,MAAUyC,MACR,2BAA2B3B,KAAK4B,YAAYC,sDAIhD,OAAOnB,MAAMoB,EAASJ,GAgBxBlB,SAAST,GACP,GAAIC,KAAKd,YACP,GAAI6C,EAAoB/B,KAAKgC,KAC3BhC,KAAKgC,IAAOC,EAAWlC,EAAOC,UACzB,CAML,MAAMkC,EAAY,IAAKlC,KAAKgC,IAAO/B,GACnCiC,EAAUlC,KAAKmC,KAAqBpC,EACnCC,KAAKgC,IAAyBC,EAAWC,EAAWlC,KAAM,QAG7DA,KAAKsB,GAAgBvB,EAUfS,wBACAA"}