{"version":3,"file":"platform-support.js","sources":["src/platform-support.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * lit-html patch to support browsers without native web components.\n *\n * This module should be used in addition to loading the web components\n * polyfills via @webcomponents/webcomponentjs. When using those polyfills\n * support for polyfilled Shadow DOM is automatic via the ShadyDOM polyfill.\n * Scoping classes are added to DOM nodes to facilitate CSS scoping that\n * simulates the style scoping Shadow DOM provides. ShadyDOM does this scoping\n * to all elements added to the DOM. This module provides an important\n * optimization for this process by pre-scoping lit-html template\n * DOM. This means ShadyDOM does not have to scope each instance of the\n * template DOM. Instead, each template is scoped only once.\n *\n * Creating scoped CSS is not covered by this module. It is, however, integrated\n * into the lit-element and @lit/reactive-element packages. See the ShadyCSS docs\n * for how to apply scoping to CSS:\n * https://github.com/webcomponents/polyfills/tree/master/packages/shadycss#usage.\n *\n * @packageDocumentation\n */\n\nconst needsPlatformSupport = !!(\n  window.ShadyCSS !== undefined &&\n  (!window.ShadyCSS.nativeShadow || window.ShadyCSS.ApplyShim)\n);\n\ninterface RenderOptions {\n  readonly renderBefore?: ChildNode | null;\n  scope?: string;\n}\n\ninterface ShadyTemplateResult {\n  strings: TemplateStringsArray;\n  _$litType$?: string;\n}\n\ninterface PatchableChildPart {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-misused-new\n  new (...args: any[]): PatchableChildPart;\n  _$committedValue: unknown;\n  _$startNode: ChildNode;\n  _$endNode: ChildNode | null;\n  options: RenderOptions;\n  _$setValue(value: unknown): void;\n  _$getTemplate(\n    strings: TemplateStringsArray,\n    result: ShadyTemplateResult\n  ): HTMLTemplateElement;\n}\n\ninterface PatchableTemplate {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-misused-new\n  new (...args: any[]): PatchableTemplate;\n  _$createElement(html: string): HTMLTemplateElement;\n  _$element: HTMLTemplateElement;\n  _$options: RenderOptions;\n}\n\ninterface PatchableTemplateInstance {\n  _$template: PatchableTemplate;\n}\n\n// Scopes that have had styling prepared. Note, must only be done once per\n// scope.\nconst styledScopes: Set<string> = new Set();\n// Map of css per scope. This is collected during first scope render, used when\n// styling is prepared, and then discarded.\nconst scopeCssStore: Map<string, string[]> = new Map();\n\n/**\n * lit-html patches. These properties cannot be renamed.\n * * ChildPart.prototype._$getTemplate\n * * ChildPart.prototype._$setValue\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(globalThis as any)['litHtmlPlatformSupport'] ??= (\n  Template: PatchableTemplate,\n  ChildPart: PatchableChildPart\n) => {\n  if (!needsPlatformSupport) {\n    return;\n  }\n\n  // console.log(\n  //   '%c Making lit-html compatible with ShadyDOM/CSS.',\n  //   'color: lightgreen; font-style: italic'\n  // );\n\n  const needsPrepareStyles = (name: string | undefined) =>\n    name !== undefined && !styledScopes.has(name);\n\n  const cssForScope = (name: string) => {\n    let scopeCss = scopeCssStore.get(name);\n    if (scopeCss === undefined) {\n      scopeCssStore.set(name, (scopeCss = []));\n    }\n    return scopeCss;\n  };\n\n  const prepareStyles = (name: string, template: HTMLTemplateElement) => {\n    // Get styles\n    const scopeCss = cssForScope(name);\n    if (scopeCss.length) {\n      const style = document.createElement('style');\n      style.textContent = scopeCss.join('\\n');\n      // Note, it's important to add the style to the *end* of the template so\n      // it doesn't mess up part indices.\n      template.content.appendChild(style);\n    }\n    // Mark this scope as styled.\n    styledScopes.add(name);\n    // Remove stored data since it's no longer needed.\n    scopeCssStore.delete(name);\n    // ShadyCSS removes scopes and removes the style under ShadyDOM and leaves\n    // it under native Shadow DOM\n    window.ShadyCSS!.prepareTemplateStyles(template, name);\n  };\n\n  const scopedTemplateCache = new Map<\n    string,\n    Map<TemplateStringsArray, PatchableTemplate>\n  >();\n\n  // Note, it's ok to subclass Template since it's only used via ChildPart.\n  class ShadyTemplate extends Template {\n    /**\n     * Override to extract style elements from the template\n     * and store all style.textContent in the shady scope data.\n     */\n    _$createElement(html: string) {\n      const template = super._$createElement(html);\n      const scope = this._$options?.scope;\n      if (scope !== undefined) {\n        if (!window.ShadyCSS!.nativeShadow) {\n          window.ShadyCSS!.prepareTemplateDom(template, scope);\n        }\n        const scopeCss = cssForScope(scope);\n        // Remove styles and store textContent.\n        const styles = template.content.querySelectorAll(\n          'style'\n        ) as NodeListOf<HTMLStyleElement>;\n        // Store the css in this template in the scope css and remove the <style>\n        // from the template _before_ the node-walk captures part indices\n        scopeCss.push(\n          ...Array.from(styles).map((style) => {\n            style.parentNode?.removeChild(style);\n            return style.textContent!;\n          })\n        );\n      }\n      return template;\n    }\n  }\n\n  const renderContainer = document.createDocumentFragment();\n  const renderContainerMarker = document.createComment('');\n\n  const childPartProto = ChildPart.prototype;\n  /**\n   * Patch to apply gathered css via ShadyCSS. This is done only once per scope.\n   */\n  const setValue = childPartProto._$setValue;\n  childPartProto._$setValue = function (\n    this: PatchableChildPart,\n    value: unknown\n  ) {\n    const container = this._$startNode.parentNode!;\n    const scope = this.options.scope;\n    if (container instanceof ShadowRoot && needsPrepareStyles(scope)) {\n      // Note, @apply requires outer => inner scope rendering on initial\n      // scope renders to apply property values correctly. Style preparation\n      // is tied to rendering into `shadowRoot`'s and this is typically done by\n      // custom elements. If this is done in `connectedCallback`, as is typical,\n      // the code below ensures the right order since content is rendered\n      // into a fragment first so the hosting element can prepare styles first.\n      // If rendering is done in the constructor, this won't work, but that's\n      // not supported in ShadyDOM anyway.\n      const startNode = this._$startNode;\n      const endNode = this._$endNode;\n\n      // Temporarily move this part into the renderContainer.\n      renderContainer.appendChild(renderContainerMarker);\n      this._$startNode = renderContainerMarker;\n      this._$endNode = null;\n\n      // Note, any nested template results render here and their styles will\n      // be extracted and collected.\n      setValue.call(this, value);\n\n      // Get the template for this result or create a dummy one if a result\n      // is not being rendered.\n      const template = (value as ShadyTemplateResult)?._$litType$\n        ? (this._$committedValue as PatchableTemplateInstance)._$template\n            ._$element\n        : document.createElement('template');\n      prepareStyles(scope!, template);\n\n      // Note, this is the temporary startNode.\n      renderContainer.removeChild(renderContainerMarker);\n      // When using native Shadow DOM, include prepared style in shadowRoot.\n      if (window.ShadyCSS?.nativeShadow) {\n        const style = template.content.querySelector('style');\n        if (style !== null) {\n          renderContainer.appendChild(style.cloneNode(true));\n        }\n      }\n      container.insertBefore(renderContainer, endNode);\n      // Move part back to original container.\n      this._$startNode = startNode;\n      this._$endNode = endNode;\n    } else {\n      setValue.call(this, value);\n    }\n  };\n\n  /**\n   * Patch ChildPart._$getTemplate to look up templates in a cache bucketed\n   * by element name.\n   */\n  childPartProto._$getTemplate = function (\n    strings: TemplateStringsArray,\n    result: ShadyTemplateResult\n  ) {\n    const scope = this.options.scope!;\n    let templateCache = scopedTemplateCache.get(scope);\n    if (templateCache === undefined) {\n      scopedTemplateCache.set(scope, (templateCache = new Map()));\n    }\n    let template = templateCache.get(strings);\n    if (template === undefined) {\n      templateCache.set(\n        strings,\n        (template = new ShadyTemplate(result, this.options))\n      );\n    }\n    return template;\n  };\n};\n"],"names":["needsPlatformSupport","undefined","window","ShadyCSS","nativeShadow","ApplyShim","styledScopes","Set","scopeCssStore","Map","globalThis","Template","ChildPart","cssForScope","name","scopeCss","get","set","scopedTemplateCache","ShadyTemplate","[object Object]","html","template","super","_$createElement","scope","this","_$options","prepareTemplateDom","styles","content","querySelectorAll","push","Array","from","map","style","parentNode","removeChild","textContent","renderContainer","document","createDocumentFragment","renderContainerMarker","createComment","childPartProto","prototype","setValue","_$setValue","value","container","_$startNode","options","ShadowRoot","has","startNode","endNode","_$endNode","appendChild","call","_$litType$","_$committedValue","_$template","_$element","createElement","length","join","add","delete","prepareTemplateStyles","prepareStyles","querySelector","cloneNode","insertBefore","_$getTemplate","strings","result","templateCache"],"mappings":";;;;;;;;;;;;;aAmCA,MAAMA,SACgBC,IAApBC,OAAOC,UACLD,OAAOC,SAASC,eAAgBF,OAAOC,SAASE,WAyC9CC,EAA4B,IAAIC,IAGhCC,EAAuC,IAAIC,OAQhDC,YAA2C,2BAAA,uBAAM,CAChDC,EACAC,KAEA,IAAKZ,EACH,OAQF,MAGMa,EAAeC,IACnB,IAAIC,EAAWP,EAAcQ,IAAIF,GAIjC,YAHiBb,IAAbc,GACFP,EAAcS,IAAIH,EAAOC,EAAW,IAE/BA,GAsBHG,EAAsB,IAAIT,IAMhC,MAAMU,UAAsBR,EAK1BS,EAAgBC,GACd,MAAMC,EAAWC,MAAMC,EAAgBH,GACjCI,EAAQC,KAAKC,GAAWF,MAC9B,QAAcxB,IAAVwB,EAAqB,CAClBvB,OAAOC,SAAUC,cACpBF,OAAOC,SAAUyB,mBAAmBN,EAAUG,GAEhD,MAAMV,EAAWF,EAAYY,GAEvBI,EAASP,EAASQ,QAAQC,iBAC9B,SAIFhB,EAASiB,QACJC,MAAMC,KAAKL,GAAQM,KAAKC,IACzBA,EAAMC,YAAYC,YAAYF,GACvBA,EAAMG,gBAInB,OAAOjB,GAIX,MAAMkB,EAAkBC,SAASC,yBAC3BC,EAAwBF,SAASG,cAAc,IAE/CC,EAAiBjC,EAAUkC,UAI3BC,EAAWF,EAAeG,EAChCH,EAAeG,EAAa,SAE1BC,GAEA,MAAMC,EAAYxB,KAAKyB,EAAYd,WAC7BZ,EAAQC,KAAK0B,QAAQ3B,MAC3B,GAAIyB,aAAqBG,iBA/EhBpD,KADiBa,EAgFgCW,KA/EnCnB,EAAagD,IAAIxC,GA+E0B,CAShE,MAAMyC,EAAY7B,KAAKyB,EACjBK,EAAU9B,KAAK+B,EAGrBjB,EAAgBkB,YAAYf,GAC5BjB,KAAKyB,EAAcR,EACnBjB,KAAK+B,EAAY,KAIjBV,EAASY,KAAKjC,KAAMuB,GAIpB,MAAM3B,EAAY2B,GAA+BW,WAC5ClC,KAAKmC,EAA+CC,EAClDC,EACHtB,SAASuB,cAAc,YAM3B,GArGkB,EAAClD,EAAcQ,KAEnC,MAAMP,EAAWF,EAAYC,GAC7B,GAAIC,EAASkD,OAAQ,CACnB,MAAM7B,EAAQK,SAASuB,cAAc,SACrC5B,EAAMG,YAAcxB,EAASmD,KAAK,MAGlC5C,EAASQ,QAAQ4B,YAAYtB,GAG/B9B,EAAa6D,IAAIrD,GAEjBN,EAAc4D,OAAOtD,GAGrBZ,OAAOC,SAAUkE,sBAAsB/C,EAAUR,IAgF/CwD,CAAc7C,EAAQH,GAGtBkB,EAAgBF,YAAYK,GAExBzC,OAAOC,UAAUC,aAAc,CACjC,MAAMgC,EAAQd,EAASQ,QAAQyC,cAAc,SAC/B,OAAVnC,GACFI,EAAgBkB,YAAYtB,EAAMoC,WAAU,IAGhDtB,EAAUuB,aAAajC,EAAiBgB,GAExC9B,KAAKyB,EAAcI,EACnB7B,KAAK+B,EAAYD,OAEjBT,EAASY,KAAKjC,KAAMuB,GA3HG,IAACnC,GAmI5B+B,EAAe6B,EAAgB,SAC7BC,EACAC,GAEA,MAAMnD,EAAQC,KAAK0B,QAAQ3B,MAC3B,IAAIoD,EAAgB3D,EAAoBF,IAAIS,QACtBxB,IAAlB4E,GACF3D,EAAoBD,IAAIQ,EAAQoD,EAAgB,IAAIpE,KAEtD,IAAIa,EAAWuD,EAAc7D,IAAI2D,GAOjC,YANiB1E,IAAbqB,GACFuD,EAAc5D,IACZ0D,EACCrD,EAAW,IAAIH,EAAcyD,EAAQlD,KAAK0B,UAGxC9B"}