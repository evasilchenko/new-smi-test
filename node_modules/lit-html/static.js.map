{"version":3,"file":"static.js","sources":["src/static.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2020 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport {html as coreHtml, svg as coreSvg, TemplateResult} from './lit-html.js';\n\n/**\n * Wraps a string so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * This is a very unsafe operation and may break templates if changes\n * the structure of a template. Do not pass user input to this function\n * without sanitizing it.\n *\n * Static values can be changed, but they will cause a complete re-render\n * since they effectively create a new template.\n */\nexport const unsafeStatic = (value: string) => ({\n  _$litStatic$: value,\n});\n\ntype StaticValue = ReturnType<typeof unsafeStatic>;\n\nconst stringsCache = new Map<string, TemplateStringsArray>();\n\n/**\n * Wraps a lit-html template tag (`html` or `svg`) to add static value support.\n */\nexport const withStatic = (coreTag: typeof coreHtml) => (\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n): TemplateResult => {\n  const l = values.length;\n  let staticValue: string | undefined;\n  let dynamicValue: unknown;\n  const staticStrings: Array<string> = [];\n  const dynamicValues: Array<unknown> = [];\n  let i = 0;\n  let hasStatics = false;\n  let s: string;\n\n  while (i < l) {\n    s = strings[i];\n    // Collect any unsafeStatic values, and their following template strings\n    // so that we treat a run of template strings and unsafe static values as\n    // a single template string.\n    while (\n      i < l &&\n      ((dynamicValue = values[i]),\n      (staticValue = (dynamicValue as StaticValue)?._$litStatic$)) !== undefined\n    ) {\n      s += staticValue + strings[++i];\n      hasStatics = true;\n    }\n    dynamicValues.push(dynamicValue);\n    staticStrings.push(s);\n    i++;\n  }\n  // If the last value isn't static (which would have consumed the last\n  // string), then we need to add the last string.\n  if (i === l) {\n    staticStrings.push(strings[l]);\n  }\n\n  if (hasStatics) {\n    const key = staticStrings.join('$$lit$$');\n    strings = stringsCache.get(key)!;\n    if (strings === undefined) {\n      stringsCache.set(\n        key,\n        (strings = (staticStrings as unknown) as TemplateStringsArray)\n      );\n    }\n    values = dynamicValues;\n  }\n  return coreTag(strings, ...values);\n};\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const html = withStatic(coreHtml);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const svg = withStatic(coreSvg);\n"],"names":["unsafeStatic","value","St","stringsCache","Map","withStatic","coreTag","strings","values","l","length","staticValue","dynamicValue","staticStrings","dynamicValues","s","i","hasStatics","undefined","_$litStatic$","push","key","join","get","set","html","coreHtml","svg","coreSvg"],"mappings":";;;;;;;;;;;;;SA0BaA,EAAgBC,KAC3BC,GAAcD,IAKVE,EAAe,IAAIC,IAKZC,EAAcC,GAA6B,CACtDC,KACGC,KAEH,MAAMC,EAAID,EAAOE,OACjB,IAAIC,EACAC,EACJ,MAAMC,EAA+B,GAC/BC,EAAgC,GACtC,IAEIC,EAFAC,EAAI,EACJC,GAAa,EAGjB,KAAOD,EAAIP,GAAG,CAKZ,IAJAM,EAAIR,EAAQS,GAKVA,EAAIP,QAE6DS,KAD/DN,EAAeJ,EAAOQ,GACvBL,EAAeC,GAA8BO,KAE9CJ,GAAKJ,EAAcJ,IAAUS,GAC7BC,GAAa,EAEfH,EAAcM,KAAKR,GACnBC,EAAcO,KAAKL,GACnBC,IAQF,GAJIA,IAAMP,GACRI,EAAcO,KAAKb,EAAQE,IAGzBQ,EAAY,CACd,MAAMI,EAAMR,EAAcS,KAAK,gBAEfJ,KADhBX,EAAUJ,EAAaoB,IAAIF,KAEzBlB,EAAaqB,IACXH,EACCd,EAAWM,GAGhBL,EAASM,EAEX,OAAOR,EAAQC,KAAYC,IAShBiB,EAAOpB,EAAWqB,GAQlBC,EAAMtB,EAAWuB"}